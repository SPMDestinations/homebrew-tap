diff -ruN empty/Makefile patched/Makefile
--- empty/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ patched/Makefile	2020-08-03 16:12:05.000000000 +0200
@@ -0,0 +1,88 @@
+# Makefile
+#
+# Created by Helge Heß
+# Copyright © 2020 ZeeZide GmbH. All rights reserved.
+
+# This script variant expects an unarchived target Swift toolchain in $PWD,
+# i.e. `usr` (with bin, include, lib, local, share)
+
+prefix=/usr/local
+
+# This is required because we need to hardcode the destination.json to the
+# actual location.
+ACTUAL_DESTINATION_PREFIX=/usr/local
+
+SWIFT_VERSION=5.3
+
+TARGET_ARCH=x86_64
+TARGET_TRIPLE=$(TARGET_ARCH)-unknown-linux
+LINUX_TARGET_TRIPLE=$(TARGET_ARCH)-linux-gnu
+PLATFORM=ubuntu16.04
+	
+BUILD_DIR=$(PWD)/.build
+FETCH_DIR=$(PWD)/.fetch
+
+DESTDIR_RELAPTH=lib/swift/dst/$(TARGET_TRIPLE)
+DESTDIR_PREFIX=$(prefix)/$(DESTDIR_RELAPTH)
+INSTALL_PREFIX=$(ACTUAL_DESTINATION_PREFIX)/$(DESTDIR_RELAPTH)
+
+APT_DISTRIBUTION_NAME=xenial
+APT_PLATFORM=amd64
+APT_REPOSITORY_URL=http://de.archive.ubuntu.com/ubuntu
+APT_PACKAGES_FILE_URL=$(APT_REPOSITORY_URL)/dists/$(APT_DISTRIBUTION_NAME)/main/binary-$(APT_PLATFORM)/Packages.gz
+
+CROSS_TOOLCHAIN_NAME=swift-$(SWIFT_VERSION)-$(PLATFORM).xtoolchain
+
+# The packages we want in the SDK. Those should be as many as possible, so
+# that arbitrary software can be built.
+# (In case that turns out to be an issue, we can always do separate packages
+#  later).
+PACKAGE_NAMES = \
+	libc6 libc6-dev linux-libc-dev libicu55 libicu-dev	\
+	libgcc1 libgcc-5-dev libstdc++6 libstdc++-5-dev 	\
+	zlib1g-dev libedit2 libedit-dev 			\
+	libpq5 libpq-dev libsqlite3-dev				\
+	libxml2 libxml2-dev libncurses5 libncurses5-dev		\
+	libcurl4 libcurl4-openssl-dev libssl1.1 libssl-dev
+
+MKDIR=mkdir
+CP=cp
+CLONE=cp -ac
+LN_S=ln -s
+
+all: retrieve-packages build-toolchain
+
+install: all
+	$(MKDIR) -p $(DESTDIR_PREFIX)
+	$(CLONE) $(BUILD_DIR)/$(CROSS_TOOLCHAIN_NAME) \
+	         $(DESTDIR_PREFIX)/$(CROSS_TOOLCHAIN_NAME)
+
+clean:
+	rm -rf $(BUILD_DIR)
+
+distclean: clean
+	rm -rf $(FETCH_DIR)
+
+# package download
+
+retrieve-packages:
+	BUILD_DIR=$(BUILD_DIR) FETCH_DIR=$(FETCH_DIR)	\
+	TARGET_ARCH=$(TARGET_ARCH)			\
+	LINUX_TARGET_TRIPLE=$(LINUX_TARGET_TRIPLE)	\
+	TARGET_PLATFORM=$(PLATFORM)			\
+	TARGET_SDK_NAME=$(TARGET_ARCH)-$(PLATFORM).sdk 	\
+	APT_REPOSITORY_URL=$(APT_REPOSITORY_URL)	\
+	APT_PACKAGES_FILE_URL=$(APT_PACKAGES_FILE_URL)	\
+	./retrieve-sdk-packages.sh "$(PACKAGE_NAMES)"
+
+# toolchain builder
+
+build-toolchain: $(PACKAGE_FETCH_FILE)
+	BUILD_DIR=$(BUILD_DIR) FETCH_DIR=$(FETCH_DIR)	\
+	SWIFT_VERSION=$(SWIFT_VERSION) 			\
+	TARGET_ARCH=$(TARGET_ARCH)			\
+	TARGET_PLATFORM=$(PLATFORM)			\
+	CROSS_TOOLCHAIN_NAME=$(CROSS_TOOLCHAIN_NAME)	\
+	HOST_PLATFORM=$(uname -m)			\
+	INSTALL_PREFIX=$(INSTALL_PREFIX)		\
+	./build-toolchain.sh
diff -ruN empty/build-toolchain.sh patched/build-toolchain.sh
--- empty/build-toolchain.sh	1970-01-01 01:00:00.000000000 +0100
+++ patched/build-toolchain.sh	2020-08-03 17:29:34.000000000 +0200
@@ -0,0 +1,191 @@
+#!/bin/bash
+#
+# Based on
+#     - https://github.com/apple/swift-package-manager/blob/master/Utilities/build_ubuntu_cross_compilation_toolchain
+
+# by Johannes Weiß
+# Adjustments by Helge Heß <me@helgehess.eu>
+
+# Usage: $0 dest ubuntu-swift-pkg
+
+set -eu
+
+BUILD_DIR=${BUILD_DIR:=${PWD}/.build}
+FETCH_DIR=${FETCH_DIR:=${PWD}/.fetch}
+SWIFT_VERSION=${SWIFT_VERSION:=5.2}
+TARGET_ARCH=${TARGET_ARCH:=x86_64}
+TARGET_PLATFORM=${TARGET_PLATFORM:=ubuntu16.04}
+CROSS_TOOLCHAIN_NAME=${CROSS_TOOLCHAIN_NAME:=swift-${SWIFT_VERSION}-${TARGET_PLATFORM}.xtoolchain}
+HOST_PLATFORM=${HOST_PLATFORM:=x86_64}
+
+# must be specified:
+#INSTALL_PREFIX=${INSTALL_PREFIX:=/usr/local/lib/swift/dst/${TARGET_ARCH}-unknown-linux}
+
+# brew install swiftxcode/swiftxcode/swift-xctoolchain-5.2
+# brew install swiftxcode/swiftxcode/clang-llvm-bin-8
+# ./retrieve-sdk-packages.sh
+HOST_SWIFT_TOOLCHAIN=/usr/local/lib/swift/xctoolchains/${HOST_PLATFORM}-apple-darwin/${SWIFT_VERSION}-current/swift.xctoolchain
+HOST_X_LLD=/usr/local/lib/swift/clang-llvm/${HOST_PLATFORM}-apple-darwin/8.0.0/bin/lld
+linux_sdk_name="${TARGET_ARCH}-${TARGET_PLATFORM}.sdk"
+LINUX_SDK="${BUILD_DIR}/${linux_sdk_name}"
+
+export PATH="/bin:/usr/bin"
+
+#PGK is $3
+
+function realpath() {
+    if [[ "${1:0:1}" = / ]]; then
+        echo "$1"
+    else
+        (
+        cd "$(dirname "$1")"
+        echo "$(pwd)/$(basename "$1")"
+        )
+    fi
+}
+
+function fix_glibc_modulemap() {
+    local glc_mm
+    local tmp
+    local inc_dir
+
+    glc_mm="$1"
+    echo "glibc.modulemap at '$glc_mm'"
+    test -f "$glc_mm"
+
+    tmp=$(mktemp "$glc_mm"_orig_XXXXXX)
+    inc_dir="$(dirname "$glc_mm")/private_includes"
+    cat "$glc_mm" >> "$tmp"
+    echo "Paths:"
+    echo " - original glibc.modulemap: $tmp"
+    echo " - new      glibc.modulemap: $glc_mm"
+    echo " - private includes dir    : $inc_dir"
+    echo -n > "$glc_mm"
+    rm -rf "$inc_dir"
+    mkdir "$inc_dir"
+    cat "$tmp" | while IFS='' read line; do
+        if [[ "$line" =~ ^(\ *header\ )\"\/+usr\/include\/(x86_64-linux-gnu\/)?([^\"]+)\" ]]; then
+            local orig_inc
+            local rel_repl_inc
+            local repl_inc
+
+            orig_inc="${BASH_REMATCH[3]}"
+            rel_repl_inc="$(echo "$orig_inc" | tr / _)"
+            repl_inc="$inc_dir/$rel_repl_inc"
+            echo "${BASH_REMATCH[1]} \"$(basename "$inc_dir")/$rel_repl_inc\"" >> "$glc_mm"
+            if [[ "$orig_inc" == "uuid/uuid.h" ]]; then
+                # no idea why ;)
+                echo "#include <linux/uuid.h>" >> "$repl_inc"
+            else
+                echo "#include <$orig_inc>" >> "$repl_inc"
+            fi
+            true
+        else
+            echo "$line" >> "$glc_mm"
+        fi
+    done
+}
+
+# set -xv # for debugging
+
+# config
+blocks_h_url="https://raw.githubusercontent.com/apple/swift-corelibs-libdispatch/master/src/BlocksRuntime/Block.h"
+
+if ! test -d "${HOST_SWIFT_TOOLCHAIN}"; then
+  echo "Missing host toolchain: ${HOST_SWIFT_TOOLCHAIN}"; exit 1
+fi
+if ! test -d "${LINUX_SDK}"; then
+  echo "Missing Linux SDK: ${LINUX_SDK}"; exit 1
+fi
+if ! test -x "${HOST_X_LLD}"; then
+  echo "Missing LLD: ${HOST_X_LLD}"; exit 1
+fi
+
+
+# ************************* RUN **************************
+
+echo "Cleaning existing chain ..."
+rm -rf "${BUILD_DIR}/${CROSS_TOOLCHAIN_NAME}"
+mkdir -p "${BUILD_DIR}/${CROSS_TOOLCHAIN_NAME}"
+
+# clone-copy Linux SDK w/ the unpacked packages, we need to patch it later
+echo "Cloning Linux SDK ${LINUX_SDK} ..."
+cp -ac "${LINUX_SDK}" \
+       "${BUILD_DIR}/${CROSS_TOOLCHAIN_NAME}/${linux_sdk_name}"
+
+# clone-copy Swift Host SDK, we need to patch it later
+echo "Cloning host Swift toolchain ${HOST_SWIFT_TOOLCHAIN} ..."
+xc_tc_name="swift.xctoolchain"
+cp -ac "${HOST_SWIFT_TOOLCHAIN}" \
+       "${BUILD_DIR}/${CROSS_TOOLCHAIN_NAME}/${xc_tc_name}"
+
+# Copy Linker (lld)
+# TBD: If we use an absolute path in the json-declaration, we may not need
+#      this, it copies the lld INTO the HOST Swift toolchain.
+echo "Installing LLD into host toolchain: ${HOST_X_LLD} ..."
+cp -ac "$HOST_X_LLD" "${BUILD_DIR}/${CROSS_TOOLCHAIN_NAME}/${xc_tc_name}/usr/bin/ld.lld"
+
+
+# swift.xctoolchain/usr/lib/swift_static/linux
+# swift.xctoolchain/usr/lib/swift/linux
+echo "Coping in headers/libs from target Swift toolchain ..."
+echo "  .. Linux Swift libs/mods into host toolchain ..."
+cp -ac "usr/lib/swift/linux"          "${BUILD_DIR}/${CROSS_TOOLCHAIN_NAME}/$xc_tc_name/usr/lib/swift/linux"
+mkdir -p "${BUILD_DIR}/${CROSS_TOOLCHAIN_NAME}/$xc_tc_name/usr/lib/swift_static"
+cp -ac "usr/lib/swift_static/linux"   "${BUILD_DIR}/${CROSS_TOOLCHAIN_NAME}/$xc_tc_name/usr/lib/swift_static/linux"
+
+echo "  .. Linux Swift libs/mods into target toolchain ..."
+mkdir -p "${BUILD_DIR}/${CROSS_TOOLCHAIN_NAME}/$linux_sdk_name/usr/lib/swift"
+mkdir -p "${BUILD_DIR}/${CROSS_TOOLCHAIN_NAME}/$linux_sdk_name/usr/lib/swift_static"
+cp -ac "usr/lib/swift/linux"          "${BUILD_DIR}/${CROSS_TOOLCHAIN_NAME}/$linux_sdk_name/usr/lib/swift/linux"
+cp -ac "usr/lib/swift_static/linux"   "${BUILD_DIR}/${CROSS_TOOLCHAIN_NAME}/$linux_sdk_name/usr/lib/swift_static/linux"
+
+echo "  .. Linux Swift libs/mods into host toolchain ..."
+cp -ac "usr/lib/swift/dispatch"       "${BUILD_DIR}/${CROSS_TOOLCHAIN_NAME}/$linux_sdk_name/usr/include/dispatch"
+cp -ac "usr/lib/swift/CoreFoundation" "${BUILD_DIR}/${CROSS_TOOLCHAIN_NAME}/$linux_sdk_name/usr/include/CoreFoundation"
+cp -ac "usr/lib/swift/os"             "${BUILD_DIR}/${CROSS_TOOLCHAIN_NAME}/$linux_sdk_name/usr/include/os"
+echo "  ok."
+
+
+echo "Fetching/Installing Block.h ..."
+curl --fail -s -o "${BUILD_DIR}/${CROSS_TOOLCHAIN_NAME}/$linux_sdk_name/usr/include/Block.h" "$blocks_h_url"
+
+if [ ! -e "${BUILD_DIR}/${CROSS_TOOLCHAIN_NAME}/$xc_tc_name/usr/bin/swift-autolink-extract" ]; then
+  echo "Linking 'swift' to swift-autolink-extract ..."
+  ln -s swift "${BUILD_DIR}/${CROSS_TOOLCHAIN_NAME}/$xc_tc_name/usr/bin/swift-autolink-extract"
+fi
+
+
+# TBD: does this have absolute links?
+# fix up glibc modulemap
+# TBD: weissi was patching the host compiler, we also(?) need to patch the
+#      target (https://github.com/SPMDestinations/homebrew-tap/issues/1)
+echo "Fixing glibc modulemap"
+fix_glibc_modulemap "${BUILD_DIR}/${CROSS_TOOLCHAIN_NAME}/$xc_tc_name/usr/lib/swift/linux/x86_64/glibc.modulemap"
+fix_glibc_modulemap "${BUILD_DIR}/${CROSS_TOOLCHAIN_NAME}/$linux_sdk_name/usr/lib/swift/linux/x86_64/glibc.modulemap"
+
+# FIXME: This needs to use absolute pathes?!
+#        Hm, does Homebrew tell us the target prefix? We need to use this
+# FIXME: the -sdk seems like a bug? but required
+cat > "${BUILD_DIR}/${CROSS_TOOLCHAIN_NAME}/destination.json" <<EOF
+{
+    "version": 1,
+    "sdk": "${INSTALL_PREFIX}/${CROSS_TOOLCHAIN_NAME}/$linux_sdk_name",
+    "toolchain-bin-dir": "${INSTALL_PREFIX}/${CROSS_TOOLCHAIN_NAME}/$xc_tc_name/usr/bin",
+    "target": "x86_64-unknown-linux",
+    "extra-cc-flags": [
+        "-fPIC"
+    ],
+    "extra-swiftc-flags": [
+        "-use-ld=lld", 
+        "-tools-directory", "${INSTALL_PREFIX}/${CROSS_TOOLCHAIN_NAME}/$xc_tc_name/usr/bin",
+        "-sdk", "${INSTALL_PREFIX}/${CROSS_TOOLCHAIN_NAME}/$linux_sdk_name"
+    ],
+    "extra-cpp-flags": [
+        "-lstdc++"
+    ]
+}
+EOF
+
+echo "done:"
+echo "  ${BUILD_DIR}/${CROSS_TOOLCHAIN_NAME}"
diff -ruN empty/retrieve-sdk-packages.sh patched/retrieve-sdk-packages.sh
--- empty/retrieve-sdk-packages.sh	1970-01-01 01:00:00.000000000 +0100
+++ patched/retrieve-sdk-packages.sh	2020-08-03 16:12:05.000000000 +0200
@@ -0,0 +1,136 @@
+#!/bin/bash
+#
+# Based on
+#     - https://github.com/apple/swift-package-manager/blob/master/Utilities/build_ubuntu_cross_compilation_toolchain
+
+# by Johannes Weiß
+# Adjustments by Helge Heß <me@helgehess.eu>
+
+# This script fetches Debian packages from the upstream Linux distribution.
+# Arguments: Package names
+
+BUILD_DIR=${PWD}/.build
+FETCH_DIR=${PWD}/.fetch
+TARGET_ARCH=${TARGET_ARCH:=x86_64}
+LINUX_TARGET_TRIPLE="${TARGET_ARCH}-linux-gnu"
+TARGET_PLATFORM=${TARGET_PLATFORM:=ubuntu16.04}
+TARGET_SDK_NAME=${TARGET_SDK_NAME:="${TARGET_ARCH}-${TARGET_PLATFORM}.sdk"}
+APT_REPOSITORY_URL=${APT_REPOSITORY_URL:="http://gb.archive.ubuntu.com/ubuntu"}
+APT_PACKAGES_FILE_URL=${APT_PACKAGES_FILE_URL:="${APT_REPOSITORY_URL}/dists/xenial/main/binary-amd64/Packages.gz"}
+
+IFS=', ' read -r -a pkg_names <<< "$1"
+
+set -eu
+
+export PATH="/bin:/usr/bin"
+
+# set -xv
+
+# config
+pkgs=()
+
+
+# ******************* Helper Functions *****************************
+
+# url
+function download_stdout() {
+    curl --fail -s "$1"
+}
+
+# url, key
+function download_with_cache() {
+    mkdir -p "${FETCH_DIR}"
+    local out
+    out="${FETCH_DIR}/$2"
+    if [[ ! -f "$out" ]]; then
+        curl --fail -s -o "$out" "$1"
+    fi
+    echo "$out"
+}
+
+
+# dst, file
+function unpack_rpm() {
+    local tmp
+    tmp=$(mktemp -d /tmp/.unpack_rpm_XXXXXX)
+    (
+      cd "$tmp"
+      tar -C "$1" -xf $2
+    )
+    rm -rf "$tmp"
+}
+# dst, file
+function unpack_deb() {
+    local tmp
+    tmp=$(mktemp -d /tmp/.unpack_deb_XXXXXX)
+    (
+    cd "$tmp"
+    ar -x "$2"
+    tar -C "$1" -xf data.tar.*
+    )
+    rm -rf "$tmp"
+}
+
+# dst, file
+function unpack() {
+    ext=${2##*.}
+    "unpack_$ext" "$@"
+}
+
+
+# ******************* Switch to target directory *******************
+
+rm -rf   "${BUILD_DIR}/${TARGET_SDK_NAME}"
+mkdir -p "${BUILD_DIR}/${TARGET_SDK_NAME}"
+
+
+echo "Fetching download URLs for packages ..."
+# This is downloading the packages in `pkg_names`,
+# first ist fetchs the packages file.
+# weissi: Oopsie, this is slow but seemingly fast enough :)
+while read -r line; do
+    for pkg_name in "${pkg_names[@]}"; do
+        if [[ "$line" =~ ^Filename:\ (.*\/([^/_]+)_.*$) ]]; then
+            # echo "${BASH_REMATCH[2]}"
+            if [[ "${BASH_REMATCH[2]}" == "$pkg_name" ]]; then
+                new_pkg="$APT_REPOSITORY_URL/${BASH_REMATCH[1]}"
+                pkgs+=( "$new_pkg" )
+                echo "- will download $new_pkg"
+            fi
+        fi
+    done
+done < <(download_stdout "$APT_PACKAGES_FILE_URL" | gunzip -d -c | grep ^Filename:)
+
+
+echo "Download and unpack packages into ${BUILD_DIR}/${TARGET_SDK_NAME} ..."
+# Loop over the packages we want to fetch, and unpack them
+tmp=$(mktemp -d "${BUILD_DIR}/tmp_pkgs_XXXXXX")
+(
+cd "$tmp"
+for f in "${pkgs[@]}"; do
+    name="$(basename "$f")"
+    archive="$(download_with_cache "$f" "$name")"
+    unpack "${BUILD_DIR}/${TARGET_SDK_NAME}" "$archive"
+done
+)
+rm -rf "$tmp"
+
+
+echo "Fixing absolute links in ${BUILD_DIR}/${TARGET_SDK_NAME} ..."
+(
+cd $BUILD_DIR
+
+# fix absolute symlinks
+find "$TARGET_SDK_NAME" -type l | while read -r line; do
+    dst=$(readlink "$line")
+    if [[ "${dst:0:1}" = / ]]; then
+        rm "$line"
+        fixedlink=$(echo "./$(dirname "${line#${TARGET_SDK_NAME}/}")" | sed 's:/[^/]*:/..:g')"${dst}"
+        echo ln -s "${fixedlink#./}" "${line#./}"
+        ln -s "${fixedlink#./}" "${line#./}"
+    fi
+done
+
+# TBD: 16.04 specific?
+ln -s 5 "$TARGET_SDK_NAME/usr/lib/gcc/${LINUX_TARGET_TRIPLE}/5.4.0"
+)
